#!/bin/bash

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage:  ${0##*/} [directory] [noupdate]
    directory  directory to copy missing git modules from, instead of cloning
    noupdate   don't update modules except if they are missing"
  exit
fi

JOBS=$((`nproc`*2))
JOBS=$((JOBS<10 ? JOBS : 10))

if ! hash parallel 2>/dev/null; then
  echo "\"parallel\" not found, install with one of the following:"
  echo "  yum install -y parallel"
  echo "  dnf install -y parallel"
  echo "  apt install -y parallel"
fi

while [ -n "$1" ]; do
  if [ $1 = noupdate ]; then
    NOPULL=1
  else
    [ -d $1 ] || { echo "Directory not found: $1"; exit; }
    COPY_FROM=$1
  fi
  shift
done

if [ -z "$NOPULL" ]; then
  #---- Update all modules ----
  if hash parallel 2>/dev/null; then
    TPInternalListDirs | parallel -j $JOBS -I{} TPInternalUpdate {}
  else
    for i in ./* ; do
      if [ -e "$i/.git" ]; then
        directory=$(basename $i)
        cd $directory
        git pull
        cd ..
      elif [ -d "$i" ]; then
        echo "$i is not a git repo."
      fi
    done
  fi
fi
echo "=================================================================="

#---- Get any URL translation ----
insteadof=$(git config --get-regexp 'url.*\.insteadof')
if [ -n "$insteadof" ]; then
  url=$(echo $insteadof | sed 's/^url\.\(.*\)\.insteadof .*/\1/')
  insteadof=$(echo $insteadof | sed 's/^.*\.insteadof //')
fi

#---- Check out any modules that we have not yet got ----
declare -a NEW_MODULES

[ -f project.inc ] && project_inc=0
[ -f toolchain.pri ] && toolchain_pri=0
for i in ./* ; do
  if [ -d "$i" ]; then

    cd $(basename $i)

    submodules="submodules.pri"
    if [ -e "$submodules" ]; then

      remote=$(git config --get remote.origin.url | sed "s#^$insteadof#$url#")
      remote=${remote%/*}
      
      #---- Special case for tp_build ----
      if [ ! -d "../tp_build" ]; then
        cd ../
        if [ -n "$COPY_FROM" ] && [ -d $COPY_FROM/tp_build ]; then
          cp -rp $COPY_FROM/tp_build .
        else
	  NEW_MODULES+=("$remote/tp_build")
          #git clone "$remote/tp_build"
        fi
        cd $(basename $i)
      fi
      
      #---- Copy project.inc into top level directory ----
      if [ -f project.inc ]; then
        if [ ! -f ../project.inc ]; then
          cp project.inc ../
          project_inc=1
        elif [ "$project_inc" = 1 ]; then
          echo "Error! project.inc found in more than one sub-directory"
          project_inc=2
        fi
      fi
      
      #---- Copy toolchain.pri into top level directory ----
      if [ -f toolchain.pri ]; then
        if [ ! -f ../toolchain.pri ]; then
          cp toolchain.pri ../
          toolchain_pri=1
        elif [ "$toolchain_pri" = 1 ]; then
          echo "Error! toolchain.pri found in more than one sub-directory"
          toolchain_pri=2
        fi
      fi

      exec<$submodules
      while read line
      do
        if [[ $line == SUBDIRS* ]]; then
        IFS='=' read -a arr <<< "$line"
        for item in "${arr[@]:1}"
        do
          item=$(echo "$item" | tr -d ' ')
          if [ ! -d "../$item" ]; then
            cd ../
            if [ -n "$COPY_FROM" ] && [ -d $COPY_FROM/$item ]; then
              cp -rp $COPY_FROM/$item .
            else
	      NEW_MODULES+=("$remote/$item")
              #git clone "$remote/$item"
            fi
            cd $(basename $i)
          fi
        done
        fi
      done
    fi

    cd ..
  fi
done

NEW_MODULES_UNIQUE=($(echo "${NEW_MODULES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
if (( ${#NEW_MODULES_UNIQUE[@]} )); then
  if hash parallel 2>/dev/null; then
    echo "${NEW_MODULES_UNIQUE[@]}" | tr ' ' '\n' | parallel -j $JOBS -I{} git clone {}
  else
    for i in "${NEW_MODULES_UNIQUE[@]}"; do 
      git clone "$i"
    done
  fi
fi

[ "$project_inc" = 2 ] && rm -f project.inc
[ "$toolchain_pri" = 2 ] && rm -f toolchain.pri

TMP_DB_FILE="/tmp/$$_make.db.txt"
MODULE_SUBDIRS=""

env -i make -pn -f ./project.inc > $TMP_DB_FILE 2>/dev/null
while read var assign value; do
  if [[ ${var} = MODULES ]] && [[ ${assign} = '=' ]]; then
    MODULES+=" $value"
    break
  fi
done < $TMP_DB_FILE


for MODULE in ${MODULES}
do
  env -i make -pn -f "${MODULE}/submodules.pri" > $TMP_DB_FILE 2>/dev/null
  while read var assign value; do
    if [[ ${var} = SUBDIRS ]] && [[ ${assign} = '=' ]]; then
      MODULE_SUBDIRS+=" $value"
      break
    fi
  done < $TMP_DB_FILE
done

rm -f $TMP_DB_FILE

for item in ${MODULE_SUBDIRS}
do
  if [ ! -d "$item" ]; then
    if [ -n "$COPY_FROM" ] && [ -d $COPY_FROM/$item ]; then
      cp -rp $COPY_FROM/$item .
    else
      git clone "$remote/$item"
    fi
  fi
done

exit 0
